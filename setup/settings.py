# -*- coding: utf-8 -*-

"""
Django settings for setup project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os, datetime
from dotenv import load_dotenv
from pathlib import Path
from datetime import timedelta # Import timedelta here

# Sentry SDK
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from corsheaders.defaults import default_headers

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / '.env')

LOG_DATE = datetime.datetime.now().strftime("%Y-%m-%d")

# Sentry Integration
SENTRY_DSN = os.getenv('SENTRY_DSN', None)
if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[DjangoIntegration()],
        send_default_pii=False,  # Nunca envie dados sensíveis!
        environment=os.getenv('ENVIRONMENT', 'development'),
        traces_sample_rate=0.1,  # 1.0 em prod, <= 0.1 em dev
    )

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", 'django-insecure--a!@2#mejj)+89egwv=h7&mfq5bp$ev^q)z3+&vu(l2^h-pi75') # Replace in production

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DJANGO_DEBUG", "False") == "True"

# Allowed hosts should include the public schema domain and tenant domains
# In production, this should be dynamically populated or use wildcards carefully
ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "localhost,127.0.0.1,.localhost").split(",") # Added .localhost for tenant subdomains in dev

PARENT_DOMAIN = os.getenv('PARENT_DOMAIN', 'localhost')

DJ_REST_AUTH_REGISTER_SERIALIZER = 'core.serializers.CustomRegisterSerializer'

# Application definition

# --- django-tenants configuration --- Start ---
# Apps that should exist in the public schema (shared)
SHARED_APPS = (
    "django_tenants",  # Mandatory
    "core",            # App for Tenant, Domain, User models

    # Django standard apps
    "django.contrib.contenttypes",
    "django.contrib.auth",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.admin", # Optional, if you want admin in public schema

    # Third-party apps needed in public schema
    "rest_framework",
    "rest_framework.authtoken",
    "rest_framework_simplejwt",
    "django_filters",
    "corsheaders",
    "drf_spectacular",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
)

# Apps specific to each tenant
TENANT_APPS = (
    # Django standard apps (can be here if needed per tenant, but often shared)
    # "django.contrib.contenttypes", # Already in SHARED_APPS

    # Your tenant-specific apps
    "financial",
    "inventory",
    "hr",
    "reports",
    "settings_app", # Renamed from 'settings' to avoid conflict
)

INSTALLED_APPS = list(SHARED_APPS) + [
    app for app in TENANT_APPS if app not in SHARED_APPS
]

TENANT_MODEL = "core.Tenant"  # app_label.ModelName
TENANT_DOMAIN_MODEL = "core.Domain"  # app_label.ModelName
# --- django-tenants configuration --- End ---

MIDDLEWARE = [
    # --- django-tenants middleware --- Start ---
    # Should be placed at the top
    "django_tenants.middleware.main.TenantMainMiddleware",
    # --- django-tenants middleware --- End ---

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware", # CORS middleware - Ensure it's high enough
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "allauth.account.middleware.AccountMiddleware", # django-allauth middleware
    
    # --- Custom Middleware --- Start ---
    # Middleware para capturar o usuário atual para auditoria
    "core.middleware.CurrentUserTenantMiddleware",
    "core.middleware.RequestResponseCentralizerMiddleware",
    # Optional: Header-based tenant identification (use with caution)
    # 'core.middleware.TenantHeaderMiddleware',
    # RLS Middleware: Must run AFTER tenant identification
    # 'core.middleware.RowLevelSecurityMiddleware',
    # --- Custom Middleware --- End ---
]

ROOT_URLCONF = 'setup.urls' # Tenant-specific URLs
PUBLIC_SCHEMA_URLCONF = "setup.urls_public" # Public schema URLs (e.g., tenant registration)

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                "django.template.context_processors.debug",
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'setup.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django_tenants.postgresql_backend", # Use django-tenants engine
        "NAME": os.environ.get("DB_NAME", "earc_db"),
        "USER": os.environ.get("DB_USER", "earc_user"),
        "PASSWORD": os.environ.get("DB_PASSWORD", "password"),
        "HOST": os.environ.get("DB_HOST", "localhost"),
        "PORT": os.environ.get("DB_PORT", "5432"),
    }
}

DATABASE_ROUTERS = (
    "django_tenants.routers.TenantSyncRouter",
)

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True

LANGUAGES = [
    ('pt-br', 'Português (Brasil)'),
    ('en', 'English'),
    ('es', 'Español'),
]

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / "staticfiles"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = "core.User"

# Django REST Framework Settings
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 100,
    "DEFAULT_FILTER_BACKENDS": (
        "django_filters.rest_framework.DjangoFilterBackend",
    ),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    # --- Rate Limiting Configuration --- Start ---
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '500/hour', # Limit for anonymous users
        'user': '2000/hour' # Limit for authenticated users
        # Consider more granular scopes later if needed
    },
    # --- Rate Limiting Configuration --- End ---
    "EXCEPTION_HANDLER": "core.handlers.exception_handler.custom_exception_handler",
}

# DRF Spectacular (OpenAPI/Swagger) Settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'eARC API',
    'DESCRIPTION': 'API para o sistema de gestão financeira multitenant eARC.',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False, # Do not serve schema definition endpoint
    'CONTACT': {"email": "suporte@seudominio.com"},
    'LICENSE': {"name": "MIT License"},
    # OTHER SETTINGS
}

# JWT Settings (Simple JWT)
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,

    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",

    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}

# --- CORS Settings --- Start ---
CORS_ALLOW_ALL_ORIGINS = False # More secure default

# Option 1: Explicitly list allowed origins (simpler for fixed frontend URL)
# Replace with your actual frontend domain(s) in production
CORS_ALLOWED_ORIGINS = os.environ.get("CORS_ALLOWED_ORIGINS", "http://localhost:5173,http://127.0.0.1:5173").split(",") # Vite default port is 5173

# Option 2: Use Regex for dynamic tenant subdomains (more complex setup)
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^https?:\/\/localhost(:\d+)?$", # Allow localhost for dev
    r"^https?:\/\/([a-z0-9\-]+)\.localhost(:\d+)?$", # Allow localhost for dev
    r"^https?:\/\/127\.0\.0\.1(:\d+)?$", # Allow 127.0.0.1 for dev
    r"^https?:\/\/([a-z0-9\-]+)\.127\.0\.0\.1(:\d+)?$", # Allow 127.0.0.1 for dev
    # Regex to match tenant subdomains on your production domain
    # Example: r"^https?:\/\/(\w+)\.yourappdomain\.com$", 
]

CORS_ALLOW_HEADERS = list(default_headers) + [
    "x-tenant-id"
]

# Option 3: Dynamically populate CORS_ALLOWED_ORIGINS based on Domain model
# This requires custom logic, potentially in middleware or a startup script.
# Example placeholder (requires implementation):
# def get_tenant_origins():
#     from core.models import Domain
#     # Be careful with performance here, cache results
#     return [f"http://{d.domain}" for d in Domain.objects.all()] + [f"https://{d.domain}" for d in Domain.objects.all()]
# CORS_ALLOWED_ORIGINS = get_tenant_origins() + os.environ.get("EXTRA_CORS_ORIGINS", "").split(",")

CORS_ALLOW_CREDENTIALS = True # Allow cookies to be sent (needed for sessions/CSRF if used)
# --- CORS Settings --- End ---

# Django Allauth Settings
AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)

SITE_ID = 1 # Required by allauth
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
ACCOUNT_EMAIL_VERIFICATION = 'optional' # Change to 'mandatory' in production
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_LOGOUT_ON_GET = True # Optional: Allow logout via GET request

SOCIALACCOUNT_ADAPTER = 'core.social.adapters.NoSignupSocialAccountAdapter'

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'APP': {
            'client_id': os.environ.get('GOOGLE_CLIENT_ID'),
            'secret': os.environ.get('GOOGLE_CLIENT_SECRET'),
            'key': ''
        }
    },
}

LOGIN_REDIRECT_URL = '/' # Or frontend URL
LOGOUT_REDIRECT_URL = '/' # Or frontend URL

# Email Backend (configure for real email sending in production)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Logging Configuration
os.makedirs(BASE_DIR / 'logs', exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': (
                '[{asctime}] {levelname} [{tenant}] {name}:{lineno} {message}'
            ),
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        'tenant_context': {
            '()': 'core.logging.TenantLogFilter',
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
            'filters': ['tenant_context']
        },
        'file': {
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/django.log'),
            'formatter': 'verbose',
            'filters': ['tenant_context'],
            'backupCount': 30,
            'encoding': 'utf8',
            'maxBytes': 2*1024*1024,    #Script shell/python (corn job): find /caminho/logs -name 'django.log.*' -mtime +7 -delete
        },
        'sql': {
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, f'logs/sql.log'),
            'formatter': 'simple',
            'backupCount': 7,
            'encoding': 'utf8',
            'maxBytes': 2*1024*1024,
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django.db.backends': {
            'handlers': ['console', 'sql'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG'
        },
        'django': {
            'handlers': ['console', 'file'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
        },
        'django_tenants': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'core.security': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False
        }
    },
}